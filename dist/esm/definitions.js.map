{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAuB,MAAM,iBAAiB,CAAC;AAkBjE;;;;;GAKG;AAEH,MAAM,CAAN,IAAY,QAaX;AAbD,WAAY,QAAQ;IAClB,+BAA+B;IAC/B,uCAAQ,CAAA;IACR,gDAAgD;IAChD,6BAAQ,SAAS,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAA,CAAA;IACrD,8CAA8C;IAC9C,4BAAO,SAAS,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAA,CAAA;IACpD,4CAA4C;IAC5C,4BAAQ,SAAS,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAA,CAAA;IACrD,0CAA0C;IAC1C,6BAAQ,SAAS,CAAC,WAAW,EAAE,KAAI,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAA,CAAA;IACpD,4CAA4C;IAC5C,+BAAU,SAAS,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAA,CAAA;AACzD,CAAC,EAbW,QAAQ,KAAR,QAAQ,QAanB;AAAA,CAAC;AAEF;;;;;GAKG;AAEH,MAAM,CAAN,IAAY,cAiBT;AAjBH,WAAY,cAAc;IAEtB,4FAA4F;IAC9F,yGAAmC,CAAA;IACnC,kGAAkG;IAClG,yHAA2C,CAAA;IAC3C,mCAAmC;IACnC,yHAA2C,CAAA;IAC3C,gDAAgD;IAChD,2HAA4C,CAAA;IAC5C,8DAA8D;IAC9D,yGAAmC,CAAA;IACnC,kEAAkE;IAClE,6GAAsC,CAAA;IACtC,0EAA0E;IAC1E,uGAAkC,CAAA;AAElC,CAAC,EAjBS,cAAc,KAAd,cAAc,QAiBvB;AAAA,CAAC;AAo7BH,CAAC","sourcesContent":["\nimport { Capacitor,PluginListenerHandle } from '@capacitor/core';\n//import '@capacitor/cli' \n\n////<reference types=\"@capacitor/cli\" />\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n\n    PushIOManager?: {\n      interceptOpenURL:boolean\n    }\n      \n  }\n}\n\n\n\n\n/**\n * Log level; to be used with [setLogLevel()]{@link PushIOManager#setLogLevel}\n * @readonly\n * @enum {number}\n * @memberof PushIOManager\n */\n\nexport enum LogLevel {\n  /** No logs will be printed. */\n  NONE = 0,\n  /** Logs will include only Errors level logs. */\n  ERROR = Capacitor.getPlatform() === 'android' ? 6 : 1,\n  /** Logs will include only Info level logs. */\n  INFO = Capacitor.getPlatform() === 'android' ? 4 : 2,\n  /** Logs will include Warning level logs. */\n  WARN =  Capacitor.getPlatform() === 'android' ? 5 : 3,\n  /** Logs will include Debug level logs. */\n  DEBUG = Capacitor.getPlatform()=== 'android' ? 3 : 4,\n  /** Logs will include Verbose level logs. */\n  VERBOSE = Capacitor.getPlatform() === 'android' ? 2 : 5\n};\n\n/**\n * Engagement types to be used with [trackEngagement()]{@link PushIOManager#trackEngagement}\n * @readonly\n * @enum {number}\n * @memberof PushIOManager\n */\n\nexport enum EngagementType {\n\n    /** Used by SDK to record app launch via push notification. Apps should avoid using this. */\n  PUSHIO_ENGAGEMENT_METRIC_LAUNCH = 1,\n  /** Used by SDK to record push receipt when app is in foreground. Apps should avoid using this. */\n  PUSHIO_ENGAGEMENT_METRIC_ACTIVE_SESSION = 2,\n  /** User did an In-App purchase. */\n  PUSHIO_ENGAGEMENT_METRIC_INAPP_PURCHASE = 3,\n  /** User accessed premium content in the app. */\n  PUSHIO_ENGAGEMENT_METRIC_PREMIUM_CONTENT = 4,\n  /** User did a social action, for example: share, like etc. */\n  PUSHIO_ENGAGEMENT_METRIC_SOCIAL = 5,\n  /** User did a commerce (or physical goods) purchase in the app */\n  PUSHIO_ENGAGEMENT_METRIC_PURCHASE =  7,\n  /** Any other user action that doesn't fit under other engagement-types */\n  PUSHIO_ENGAGEMENT_METRIC_OTHER = 6\n\n  };\n\n  export type Success = {\n    response:any|undefined;\n\n  }\n  export type Failure = {\n    error:string;\n  }\n\n  export type Callback = {\n    //Success callback. \n    success:any|undefined; \n    //Failure callback.\n    error:string;\n    \n  }\n\nexport type  Pubweb  = {\ndeeplinkURL:string\nweblinkURL:string\nrequestURL:string\nisPubwebURLType:boolean\nerror:string\n}\n\nexport type MessageCenterResult = {\n  messageCenter:string,\n  messages:MessageCenterMessage[],\n  errorReason:string\n}\n\nexport type MCRichContentResult = {\n  messageId:string,\n  richContent:string,\n  errorReason:string\n}\n\nexport type RegionResult = {\n\n  regionID:string,\n  regionType:string,\n  error:string\n}\n\n\nexport type Preference = {\n\n  //- Unique Identifier for this preference.\n  key:string; \n  //Human-Readable description of this preference.\n label:string;\n //Data type of this preference. Possible values: 'STRING', 'NUMBER', 'BOOLEAN'.\n type:string; \n //Preference value.\n value:string;\n}\n\nexport type MessageCenterMessage =  {\n\n  messageID:string,\n  subject:string,\n  message:string,\n  iconURL:string,\n  messageCenterName:string,\n  deeplinkURL:string,\n  richMessageHTML:string,\n  richMessageURL:string,\n  sentTimestamp:string,\n  expiryTimestamp:string,\n  customKeyValuePairs:object,\n}\n\nexport type InteractiveNotificationCategory =  {\n\n  orcl_category:string,\n  orcl_btns:InteractiveNotificationButton[]\n}\n\nexport type InteractiveNotificationButton = {\n  id:string,\n  action:string,\n  label:string\n\n}\n\nexport type RemoteMessage = {\n  to:string,\n  collapseKey:string,\n  messageId:string,\n  messageType:string,\n  ttl:string,\n  data:object\n\n}\n\nexport type GeoRegion = {\n\n  geofenceId:string,\n  geofenceName:string,\n  zoneName:string,\n  zoneId:string,\n  source:string,\n  deviceBearing:number,\n  deviceSpeed:number,\n  dwellTime:number,\n  extra:object\n}\n\nexport type BeaconRegion = {\n  beaconId:string,\n  beaconName:string,\n  beaconTag:string,\n  beaconProximity:string,\n  iBeaconUUID:string,\n  iBeaconMajor:number,\n  iBeaconMinor:number,\n  eddyStoneId1:string,\n  eddyStoneId2:string,\n  zoneName:string,\n  zoneId:string,\n  source:string,\n  dwellTime:number,\n  extra:object\n\n}\n\nexport interface ConversionEvent {\n  orderId:string,\n  orderTotal:number,\n  orderQuantity:number,\n  conversionType:number,\n  customProperties:object\n}\n\n\n\nexport interface PushIOManagerPlugin {\n\n\n\n/**\n * Gets the API Key used by the device to register with Responsys.\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n * @memberof PushIOManager\n */\ngetAPIKey():Promise<Callback>;\n\n/**\n * Gets the Account Token used by the device to register with Responsys.\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n * @memberof PushIOManager\n */\ngetAccountToken():Promise<Callback>;\n\n/**\n * @param {string} apiKey\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n * android only API\n */\n overwriteApiKey(apiKey:string):Promise<Callback>;\n\n/**\n* @param {string} accountToken\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* android only API\n*/\n\noverwriteAccountToken(accountToken:string):Promise<Callback>;\n\n/**\n* Sets the External Device Tracking ID. Useful if you have another ID for this device.\n* @param {string} trackingId External Device Tracking ID.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* @memberof PushIOManager\n*/\nsetExternalDeviceTrackingID(trackingId:String):Promise<Callback>;\n\n/**\n* Gets the External Device Tracking ID.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* @memberof PushIOManager\n*/\ngetExternalDeviceTrackingID():Promise<Callback>;\n\n/**\n* Sets the Advertising ID.\n* @param {string} adid Advertising ID.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* @memberof PushIOManager\n*/\nsetAdvertisingID(adid:string):Promise<Callback>;\n\n\n/**\n* Gets the Advertising ID.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* @memberof PushIOManager\n*/\ngetAdvertisingID():Promise<Callback>;\n\n/**\n * Gets the Responsys Device ID.\n * \n * @param {function} [success] Success callback with device ID value. \n * @param {function} [failure] Failure callback.\n */\ngetDeviceID():Promise<Callback>;\n\n/**\n* Gets the Responsys SDK version.\n* \n* @param {function} [success] Success callback with the SDK version value. \n* @param {function} [failure] Failure callback.\n*/\ngetLibVersion():Promise<Callback>;\n\n/**\n * Associates this app installation with the provided userId in Responsys.\n * <br/>Generally used when the user logs in.\n * \n * @param {string} userId User ID\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n * @memberof PushIOManager\n */\nregisterUserId(options:{userId:string}):Promise<Callback>;\n\n/**\n * Gets the User ID set earlier using [registerUserId]{@link PushIOManager#registerUserId}.\n * @param {function} [success] Success callback.    \n * @param {function} [failure] Failure callback.\n * @memberof PushIOManager\n */\ngetRegisteredUserId():Promise<Callback>; \n\n/**\n * Removes association between this app installation and the User ID that \n * was set earlier using [registerUserId]{@link PushIOManager#registerUserId}.\n * <br/>Generally used when the user logs out.\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n * @memberof PushIOManager\n */\nunregisterUserId():Promise<Callback>;\n\n  /**\n * Sets the log level. \n *\n * @param {number} logLevel\n */\nsetLogLevel(options:{logLevel:number}):Promise<void>; \n\n/**\n * @param {boolean} isLoggingEnabled\n * @param {function} [success] Success callback with boolean value. \n * @param {function} [failure] Failure callback.\n */\nsetLoggingEnabled(options:{isLoggingEnabled:boolean}):Promise<Callback>; \n\n/**\n * Configures the SDK using the provided config file name.\n * \n * <br/><br/>For Android, the file should be placed in the android <i>src/main/assets</i> directory\n * \n * @param {string} fileName A valid filename.\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n */\n\nconfigure(options:{filename:string}):Promise<Callback>;\n\n/**\n * Sets delay in registration. \n *\n * @param {boolean} delayRegistration\n */\nsetDelayRegistration(options:{delayRegistration:boolean}):Promise<Callback>;\n\n/**\n* This api provides the status, if `setDelayRegistration` is enabled of not. \n* \n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\nisDelayRegistration():Promise<Callback>;\n \n  \n  /**\n * Registers this app installation with Responsys.\n * \n * @param {boolean} useLocation Whether to send location data along with the registration request. Passing `true` will show the default system location permission dialog prompt.\n * (User location is not available on iOS platform.)\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n */\nregisterApp(options:{useLocation:boolean}):Promise<Callback>;\n\n/**\n * Asks user permissions for all push notifications types. i.e.: Sound/Badge/Alert types. \n * \n * Only available on iOS platform.\n *\n * @param {function} [success] Success callback.\n * @param {function} [failure] Failure callback.\n */\nregisterForAllRemoteNotificationTypes():Promise<Callback>;\n\n\n\n/**\n * Asks user permissions for all push notifications types. i.e.: Sound/Badge/Alert types. You can pass the notification categories definitions to register. \n * \n * Only available on iOS platform.\n *\n * @param {InteractiveNotificationCategory[]} categories Contains the notification categories definitions.\n * @param {function} [success] Success callback.\n * @param {function} [failure] Failure callback.\n */\nregisterForAllRemoteNotificationTypesWithCategories(options:{categories:InteractiveNotificationCategory[]}):Promise<Callback>;\n\n\n/**\n* Asks user permissions for all push notifications types. i.e.: Sound/Badge/Alert types.\n* \n* If readyForRegistrationCompHandler is not set, then provided completionHandler is assigned to it, to let application have access when SDK receives deviceToken.\n*\n* Only available on iOS platform.\n*\n* @param {number} authOptions Notification auth types i.e.: Sound/Badge/Alert.\n* @param {InteractiveNotificationCategory[]} categories Contains the notification categories definitions.\n* @param {function} [success] Success callback.\n* @param {function} [failure] Failure callback.\n*/\nregisterForNotificationAuthorizations(options:{authOptions:number, categories:InteractiveNotificationCategory[]}):Promise<Callback>;\n\n\n/**\n* Unregisters this app installation with Responsys. This will prevent the app from receiving push notifications.\n* \n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\n unregisterApp():Promise<Callback>;\n\n\n /**\n * Declares a preference that will be used later with [set...Preference()]{@link PushIOManager#setStringPreference}\n * \n * @param {string} key Unique ID for this preference.\n * @param {string} label Human-Readable description of this preference.\n * @param {string} type Data type of this preference. Possible values: 'STRING', 'NUMBER', 'BOOLEAN'.\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n * @memberof PushIOManager\n */\n\n\ndeclarePreference(options:{key:string, label:string, type:string}):Promise<void>; \n\n/**\n* Gets all preferences set earlier using [set...Preference()]{@link PushIOManager#setStringPreference}.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* @returns {Preference[]} Array of [Preference]{@link Preference} in success callback.\n* @memberof PushIOManager\n*/\ngetPreferences(): Promise<Preference[]>;\n  \n\n/**\n* Gets a single preference for the provided key.\n* @param {string} key Unique ID for this preference.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* @returns {Preference} Single preference in success callback.\n* @memberof PushIOManager\n*/\ngetPreference(options:{key:string}):Promise<Callback>;\n\n/**\n* Saves the key/value along with the label provided earlier in [declarePreference]{@link PushIOManager#declarePreference}\n* \n* @param {string} key Unique ID for this preference.\n* @param {string} value Value of type String.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* @memberof PushIOManager\n*/\nsetStringPreference(options:{key:string, value:string}):Promise<Callback>;\n\n/**\n* Saves the key/value along with the label provided earlier in [declarePreference]{@link PushIOManager#declarePreference}\n* \n* @param {string} key Unique ID for this preference.\n* @param {number} value Value of type Number.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* @memberof PushIOManager\n*/\nsetNumberPreference(options:{key:string, value:number}):Promise<Callback>;\n\n/**\n* Saves the key/value along with the label provided earlier in [declarePreference]{@link PushIOManager#declarePreference}\n* \n* @param {string} key Unique ID for this preference.\n* @param {boolean} value Value of type Boolean.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* @memberof PushIOManager\n*/\nsetBooleanPreference(options:{key:string, value:boolean}):Promise<Callback>;\n\n/**\n* Removes preference data for the given key.\n* \n* @param {string} key Unique ID for this preference.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* @memberof PushIOManager\n*/\nremovePreference(options:{key:string}):Promise<Callback>;\n/**\n* Removes all preference data.\n* \n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* @memberof PushIOManager\n*/\nclearAllPreferences():Promise<Callback>;\n\nsetNotificationsStacked(options:{isNotificationStacked:boolean}):Promise<Callback>; \ngetNotificationStacked():Promise<Callback>; \n\n/**\n * Records pre-defined and custom events.<br/>You can set extra properties specific to this event via the properties parameter.\n * \n * @param {string} eventName\n * @param {object} properties Custom data.\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n * @memberof PushIOManager\n */\ntrackEvent(options:{eventName:string, properties:object}):Promise<Callback>; \n\n/**\n * Sends push engagement information to Responsys.\n * \n * @param {EngagementType} metric One of [engagementType]{@link PushIOManager#engagementType}\n * @param {object=} properties Custom data to be sent along with this request.\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n * @memberof PushIOManager\n */\n \ntrackEngagement(options:{metric:EngagementType, properties:object}):Promise<Callback>; \n\n\n/**\n * Fetches messages for the given message center.\n * \n * @param {string} messageCenter \n * @param {function(messageCenter, messages)} [success] Success callback.\n * @param {string} success.messageCenter \n * @param {MessageCenterMessage[]} success.messages\n * @param {function(messageCenter, errorReason)} [failure] Failure callback.\n * @param {string} failure.messageCenter \n * @param {string} failure.errorReason\n * @memberof PushIOManager\n */\n \nfetchMessagesForMessageCenter(options:{messageCenter:string}):Promise<MessageCenterResult>;\n\n\n/**\n * @param {function} [success] Success callback with boolean value. \n * @param {function} [failure] Failure callback.\n */\nisMessageCenterEnabled():Promise<Callback>;\n\n/** \n* @param {boolean} messageCenterEnabled\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\nsetMessageCenterEnabled(options:{messageCenterEnabled:boolean}):Promise<Callback>;\n\n/**\n* Fetches rich content for the given message ID.\n* \n* @param {string} messageID\n* @param {function(messageId, richContent)} [success] Success callback. \n* @param {string} success.messageId\n* @param {string} success.richContent\n* @param {function(messageId, errorReason)} [failure] Failure callback.\n* @param {string} failure.messageId\n* @param {string} failure.errorReason\n*/\nfetchRichContentForMessage(options:{messageID:string}):Promise<MCRichContentResult>;\n\n/**\n * @param {boolean} messageCenterBadgingEnabled\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n * //android API\n */\nsetMessageCenterBadgingEnabled(options:{messageCenterBadgingEnabled:boolean}):Promise<Callback>;\n\n/**\n * Removes all Message Center messages from the SDK's cache.<br/><br/>This does not affect your local cache of the messages.\n * \n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n */\nresetMessageCenter():Promise<Callback>;\n\n/**\n* Informs the SDK that the Message Center view is visible.\n* \n* <br/><br/>This must be used along with [onMessageCenterViewFinish]{@link PushIOManager#onMessageCenterViewFinish} to track Message Center message displays.\n* \n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\n onMessageCenterViewVisible():Promise<Callback>;\n\n/**\n* Informs the SDK that the Message Center view is no longer visible.\n* \n* <br/><br/>This must be used along with [onMessageCenterViewVisible]{@link PushIOManager#onMessageCenterViewVisible} to track Message Center message displays.\n* \n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\n onMessageCenterViewFinish():Promise<Callback>;\n\n /**\n* Returns the list of message centers that have been fetched.\n* \n* @param {function} success \n* @param {function} failure Failure callback.\n*/\n\naddListener(eventName: 'onMessageCenterUpdated',listenerFunc: (message: Callback) => void): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n/**\n* Sends Message Center message engagement to Responsys.\n* \n* <br/><br/>This should be called when the message-detail view is visible to the user.\n* \n* @param {string} messageID\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\n trackMessageCenterOpenEngagement(options:{messageID:string}):Promise<Callback>;\n\n/**\n* Sends Message Center message engagement to Responsys.\n* \n* <br/><br/>This should be called when the message-list view is visible to the user.\n* \n* @param {string} messageID\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\n trackMessageCenterDisplayEngagement(options:{messageID:string}):Promise<Callback>;\n\n/**\n * @param {function} [success] Success callback as a string value. \n * @param {function} [failure] Failure callback.\n */\n getEngagementTimestamp():Promise<Callback>;\n\n/**\n * @param {function} [success] Success callback as a number value. \n * @param {function} [failure] Failure callback.\n */\n getEngagementMaxAge():Promise<Callback>;\n\n/**\n * Removes push engagement related data for a session.\n * \n * <br/><br/>This will prevent further engagements from being reported until the app is opened again via a push notification.\n * \n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n */\n resetEngagementContext():Promise<Callback>;\n\n\n/**\n * Sets the small icon used in notification display.\n * \n * @param {int} icon Resource ID of the icon.\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n * //android only API\n */\nsetDefaultSmallIcon(options:{icon:number}): Promise<Callback>;\n\n/**\n* Sets the large icon used in notification display.\n* \n* @param {int} icon Resource ID of the icon.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* //android only API\n*/\nsetDefaultLargeIcon(options:{icon:number}): Promise<Callback>;\n\n\n/**\n * Sets the badge count on app icon for the no. of Message Center messages.\n * \n * @param {number} badgeCount\n * @param {boolean} forceSetBadge Force a server-sync for the newly set badge count.\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n */\n  setBadgeCount(options:{badgeCount:number, forceSetBadge:boolean}):Promise<Callback>;\n\n/**\n* Gets the current badge count for Message Center messages.\n* \n* @param {function} [success] Success callback as a number value. \n* @param {function} [failure] Failure callback.\n*/\n getBadgeCount():Promise<Callback>;\n\n/**\n* Resets the badge count for Message Center messages.<br/>This is equivalent to calling [setBadgeCount(0, true)]{@link PushIOManager#setsetBadgeCount}\n* \n* @param {boolean} forceSetBadge Force a server-sync for the newly set badge count.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\n resetBadgeCount(options:{forceSetBadge:boolean}):Promise<Callback>;\n\n/**\n* Removes all Message Center messages from the SDK's cache.<br/><br/>This does not affect your local cache of the messages.\n* \n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\n resetMessageCenter():Promise<Callback>;\n\n\n/**\n * @param {boolean} inAppFetchEnabled\n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n */\n  setInAppFetchEnabled(options:{inAppFetchEnabled:boolean}):Promise<Callback>;\n\n/**te\n * Removes all In-App messages from the SDK's cache.\n * \n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n */\n  clearInAppMessages():Promise<Callback>;\n\n\n/**\n* @param {boolean} crashLoggingEnabled\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\n setCrashLoggingEnabled(options:{crashLoggingEnabled:boolean}):Promise<Callback>;\n\n/**\n* @param {function} [success] Success callback with boolean value. \n* @param {function} [failure] Failure callback.\n*/\n isCrashLoggingEnabled():Promise<Callback>;\n\n/**\n* @param {string} deviceToken\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* //Android only API\n*/\n setDeviceToken(deviceToken:string):Promise<Callback>;\n\n/**\n * Removes all app-defined Interactive Notification categories from the SDK's cache.\n * \n * @param {function} [success] Success callback. \n * @param {function} [failure] Failure callback.\n */\n  clearInteractiveNotificationCategories():Promise<Callback>;\n\n/**\n* Removes app-defined Interactive Notification category.\n* \n* @param {string} categoryID\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\n deleteInteractiveNotificationCategory(options:{categoryID:string}):Promise<Callback>;\n\n/**\n* Gets a single Interactive Notification category for the given category ID.\n* \n* @param {string} categoryID\n* @param {function(orcl_category, orcl_btns)} [success] Success callback.\n* @param {string} success.orcl_category\n* @param {InteractiveNotificationButton[]} success.orcl_btns\n* @param {function} [failure] Failure callback.\n* // Android only API\n*/\n getInteractiveNotificationCategory(options:{categoryID:string}):Promise<Callback>;\n\n/**\n* Adds a new app-defined Interactive Notification category.\n* \n* @param {InteractiveNotificationCategory} notificationCategory\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* Android only API\n*/\n addInteractiveNotificationCategory(options:{notificationCategory:InteractiveNotificationCategory}):Promise<Callback>;\n\n\n/**\n * Returns `true` if the given push notification payload is from Responsys, `false` otherwise.\n * \n * @param {RemoteMessage} remoteMessage\n * @param {function} [success] Success callback as a boolean value. \n * @param {function} [failure] Failure callback.\n */\n  isResponsysPush(options:{remoteMessage:RemoteMessage}):Promise<Callback>;\n\n/**\n* Request the SDK to process the given push notification payload.\n* \n* @param {RemoteMessage} remoteMessage\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n* Android only API\n*/\n handleMessage(options:{remoteMessage:RemoteMessage}):Promise<Callback>;\n\n\n setExecuteRsysWebUrl(options:{flag:boolean}):Promise<Pubweb>;\n\n getExecuteRsysWebUrl():Promise<Callback>;\n\n/**\n* @param {function} [success] Success callback as a string value. \n* @param {function} [failure] Failure callback.\n*/\n getConversionUrl():Promise<Callback>;\n\n/**\n* @param {function} [success] Success callback as a number value. \n* @param {function} [failure] Failure callback.\n* Android only API\n*/\n getRIAppId():Promise<Callback>;\n\n\n/**\n * Informs the SDK that the user has entered a geofence.\n * \n * @param {GeoRegion} region\n * @param {function(regionID, regionType)} [success] Success callback. \n * @param {string} success.regionID\n * @param {string} success.regionType\n * @param {function} [failure] Failure callback.\n */\nonGeoRegionEntered(options:{region:GeoRegion}):Promise<RegionResult>;\n\n/**\n* Informs the SDK that the user has exited a geofence.\n* \n* @param {GeoRegion} region\n* @param {function(regionID, regionType)} [success] Success callback. \n* @param {string} success.regionID\n* @param {string} success.regionType\n* @param {function} [failure] Failure callback.\n*/\nonGeoRegionExited(options:{region:GeoRegion}):Promise<RegionResult>;\n\n/**\n* Informs the SDK that the user has entered a beacon region.\n* \n* @param {BeaconRegion} region\n* @param {function(regionID, regionType)} [success] Success callback. \n* @param {string} success.regionID\n* @param {string} success.regionType\n* @param {function} [failure] Failure callback.\n*/\nonBeaconRegionEntered(options:{region:BeaconRegion}):Promise<RegionResult>;\n\n/**\n* Informs the SDK that the user has exited a beacon region.\n* \n* @param {BeaconRegion} region\n* @param {function(regionID, regionType)} [success] Success callback. \n* @param {string} success.regionID\n* @param {string} success.regionType\n* @param {function} [failure] Failure callback.\n*/\nonBeaconRegionExited(options:{region:BeaconRegion}):Promise<RegionResult>;\n\n\n/**\n * Gets the deeplink/weblink URL, if the app was opened via a Responsys deeplink. \n * \n * Only for Android. For iOS use the document listener.\n * \n * <br/><br/>This should be called everytime the app comes to the foreground.\n * \n * @param {function(deepLinkURL, webLinkURL)} [success] Success callback. \n * @param {string} success.deepLinkURL\n * @param {string} success.webLinkURL\n * @param {function} [failure] Failure callback.\n * Android only API\n */\n\n addListener(eventName: 'onDeepLinkReceived',listenerFunc: (URL: Pubweb) => void,): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n/**\n* Seting `true` this method will delay te rich push messages until `showRichPushMessage` API is called. \n* \n* Use this method when you are displaying intermediate screens like Login/Onboarding Screen.\n*  \n* @param {boolean} enabled Value of type Boolean.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\nsetDelayRichPushDisplay(options:{enabled:boolean}):Promise<Callback>;\n\n\n/**\n* Call this API to display rich push messages if they are being delayed with `setDelayRichPushDisplay`. \n* \n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\nshowRichPushMessage():Promise<Callback>;\n\n/**\n* This api provides the status, if `setDelayRichPushDisplay` is enabled of not. \n* \n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\nisRichPushDelaySet():Promise<Callback>;\n\n\n/**\n* Call this API to intercept deep links/Open URLs sent by Responsys. \n* You can intercept the URLs sent by Respinsys Open URL and overide SDK default behaviour.\n* \n* @param {boolean} enabled Value of type Boolean.\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback.\n*/\nsetInterceptOpenURL(options:{enabled:boolean}):Promise<Callback>;\n\naddListener(eventName: 'setInterceptOpenURL',listenerFunc: (message: Callback) => void): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n\n/**\n* Tracks the conversions for PUSHIO_ENGAGEMENT_METRIC_INAPP_PURCHASE and PUSHIO_ENGAGEMENT_METRIC_PURCHASE events.\n* \n* @param {ConversionEvent} event\n* @param {function} [success] Success callback. \n* @param {function} [failure] Failure callback. \n*/\ntrackConversionEvent(options:{event:ConversionEvent}):Promise<Callback>;\n\n/*\n* Sets the given color to the small icon in push notifications.\n* \n* @param {string} color as Hex String\n* Android only API\n*/\nsetNotificationSmallIconColor(options:{color:string}):Promise<Callback>;\n\n/**\n* Sets the given icon as the small icon in push notifications.\n* \n* @param {string} resourceName Name of the resource in drawable/mipmap folder, without the file extension.\n* Android only API\n*/\nsetNotificationSmallIcon(options:{resourceName:string}):Promise<Callback>;\n\n/**\n* Sets the given icon as the large icon in push notifications.\n* \n* @param {string} resourceName Name of the resource in drawable/mipmap folder, without the file extension.\n* Android only API\n*/\nsetNotificationLargeIcon(options:{resourceName:string}):Promise<Callback>;\n\n/** Sets the height of In-App banner message height.\n* <br> Banner height should be between 100 and 200 (inclusive) density-independent unit.\n*\n* @param {number} height\n* @param {function} [success] Success callback.\n* @param {function} [failure] Failure callback.\n*/\n\nsetInAppMessageBannerHeight(options:{height:number}):Promise<Callback>;\n\n/**\n* Returns the height of In-App Banner message.\n*\n* @param {function} [success] Success callback.\n* @param {function} [failure] Failure callback.\n*/\n\ngetInAppMessageBannerHeight():Promise<Callback>;\n\n/**\n* Sets the boolean to hide status bar of In-App Banner and Interstitial message\n* <br> true to hide status bar otherwise false\n*\n* @param {boolean} hideStatusBar\n* @param {function} [success] Success callback.\n* @param {function} [failure] Failure callback.\n*/\n\nsetStatusBarHiddenForIAMBannerInterstitial(options:{hideStatusBar:boolean}):Promise<Callback>;\n\n/**\n* Returns the boolean value of status bar hidden for In-App Banner and Interstitial message.\n* <br> true if status bar hidden otherwise false\n*\n* @param {function} [success] Success callback.\n* @param {function} [failure] Failure callback.\n*/\n\nisStatusBarHiddenForIAMBannerInterstitial():Promise<Callback>;\n\n\n\n};\n"]}